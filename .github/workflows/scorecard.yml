# This workflow uses actions that are not certified by GitHub. They are provided
# by a third-party and are governed by separate terms of service, privacy
# policy, and support documentation.
name: Scorecard supply-chain security
on:
  # For Branch-Protection check. Only the default branch is supported. See
  # https://github.com/ossf/scorecard/blob/main/docs/checks.md#branch-protection
  branch_protection_rule:
  # To guarantee Maintained check is occasionally updated. See
  # https://github.com/ossf/scorecard/blob/main/docs/checks.md#maintained
  schedule:
    - cron: '34 2 * * 6'
  push:
    branches: [ "main", "develop" ]
  # Run on pull requests to ensure supply chain security before merging
  pull_request:
    branches: [ "main" ]

# Declare default permissions as read only.
permissions: read-all

jobs:
  analysis:
    name: Scorecard analysis
    runs-on: ubuntu-latest
    # `publish_results: true` only works when run from the default branch. conditional can be removed if disabled.
    if: github.event.repository.default_branch == github.ref_name || github.event_name == 'pull_request'
    permissions:
      # Needed to upload the results to code-scanning dashboard.
      security-events: write
      # Needed to publish results and get a badge (see publish_results below).
      id-token: write
      # Uncomment the permissions below if installing in a private repository.
      # contents: read
      # actions: read
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - name: "Checkout code"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
          
      - name: "Run analysis"
        uses: ossf/scorecard-action@05b42c624433fc40578a4040d5cf5e36ddca8cde # v2.4.2
        with:
          results_file: results.sarif
          results_format: sarif
          # (Optional) "write" PAT token. Uncomment the `repo_token` line below if:
          # - you want to enable the Branch-Protection check on a *public* repository, or
          # - you are installing Scorecard on a *private* repository
          # To create the PAT, follow the steps in https://github.com/ossf/scorecard-action?tab=readme-ov-file#authentication-with-fine-grained-pat-optional.
          # repo_token: ${{ secrets.SCORECARD_TOKEN }}
          # Public repositories:
          #   - Publish results to OpenSSF REST API for easy access by consumers
          #   - Allows the repository to include the Scorecard badge.
          #   - See https://github.com/ossf/scorecard-action#publishing-results.
          # For private repositories:
          #   - `publish_results` will always be set to `false`, regardless
          #     of the value entered here.
          publish_results: true
          # Enabling file_mode to properly scan with gitattributes
          file_mode: git
          
      # Upload the results as artifacts (optional). Commenting out will disable uploads of run results in SARIF
      # format to the repository Actions tab.
      - name: "Upload artifact"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: SARIF file
          path: results.sarif
          retention-days: 5
          
      # Upload the results to GitHub's code scanning dashboard (optional).
      # Commenting out will disable upload of results to your repo's Code Scanning dashboard
      - name: "Upload to code-scanning"
        uses: github/codeql-action/upload-sarif@ce28f5bb42b7a9f2c824e633a3f6ee835bab6858 # v3.29.0
        with:
          sarif_file: results.sarif
          
  # Add a dependency check that specifically looks at the pinned dependencies
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    needs: analysis
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - name: "Checkout code"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        
      - name: "Set up Python"
        uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c # v4.9.1
        with:
          python-version: '3.11'
          
      - name: "Install UVX"
        run: |
          python -m pip install --upgrade pip
          pip install uv
          
      - name: "Verify dependency pinning"
        run: |
          # Check if requirements.txt contains hashes
          if [ -f requirements.txt ]; then
            echo "Checking requirements.txt for hash pinning..."
            grep -q "sha256:" requirements.txt || (echo "ERROR: requirements.txt is missing hash pinning" && exit 1)
            echo "✅ requirements.txt contains hash pinning"
          fi
          
          # Check if requirements-dev.txt contains hashes
          if [ -f requirements-dev.txt ]; then
            echo "Checking requirements-dev.txt for hash pinning..."
            grep -q "sha256:" requirements-dev.txt || (echo "ERROR: requirements-dev.txt is missing hash pinning" && exit 1)
            echo "✅ requirements-dev.txt contains hash pinning"
          fi
          
          # If requirements files exist but don't have hashes, regenerate them
          if [ -f requirements.in ] && ! grep -q "sha256:" requirements.txt 2>/dev/null; then
            echo "Generating requirements.txt with hashes..."
            uv pip compile --generate-hashes requirements.in
          fi
          
          if [ -f requirements-dev.in ] && ! grep -q "sha256:" requirements-dev.txt 2>/dev/null; then
            echo "Generating requirements-dev.txt with hashes..."
            uv pip compile --generate-hashes requirements-dev.in
          fi
          
      - name: "Check for vulnerable dependencies"
        run: |
          pip install safety
          safety check --file requirements.txt || echo "⚠️ Vulnerabilities found in dependencies"
      - name: Auto-merge dependabot PRs
        if: ${{ github.actor == 'dependabot[bot]' && contains(join(github.event.pull_request.labels.*.name, ','), 'security') }}
        uses: "pascalgn/automerge-action@v0.16.4"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
